%{
#include <ius.h>
#include <dataGenerators.h>
#include "iusAcquisitionADT.h"
#include "iusInputFile.h"
#include "iusHistoryNodeADT.h"
#include "iusPatternListADT.h"
#include "iusParameterDictADT.h"
#include "iusDemodulationDictADT.h"
#include <ius2DTransducerPrivate.h>
#include <iusTransducerADT.h>
#include <ius2DTransducerADT.h>
#include <ius3DTransducerADT.h>
%}


// Write to python's stdout, used to write to MatLab console
#define printf PySys_WriteStdout

// Allow for using a MatLab double as int.
%typemap(in) int {
        if (PyFloat_Check($input)) {
            $1 = (int) PyFloat_AsDouble($input);
            printf("warning, casting float to n = %d\n", $1);
        }
        else {
            $1 = (int) PyInt_AsLong($input);
        }
}

// Handle both iupp_t and iunpp_t as iup_t
typedef iup_t iupp_t;
typedef iup_t iunpp_t;
%ignore iupp_t;
%ignore iunpp_t;

// Handle iu2dps_t, iu2dnps_t, iu3dps_t and iu3dnps_t as ius_t
typedef ius_t iu2dps_t;
typedef ius_t iu2dnps_t;
typedef ius_t iu3dps_t;
typedef ius_t iu3dnps_t;
typedef iuhn_t iuif_t;
%ignore iu2dps_t;
%ignore iu2dnps_t;
%ignore iu3dps_t;
%ignore iu3dnps_t;
%ignore iuif_t;

// Handle both iu3Dt_t and iu2Dt_t as iut_t
%typemap(in) iut_t {
        if (!SWIG_IsOK(SWIG_ConvertPtr($input, (void **) &$1, $descriptor(iu2dt_t), 0)) &&
           (!SWIG_IsOK(SWIG_ConvertPtr($input, (void **) &$1, $descriptor(iu3dt_t), 0))))
        {
            SWIG_exception_fail(SWIG_TypeError, "in method '$symname', expecting type iu2dt_t or iu3dt_t");
        }
}

%typemap(in) float centerFrequency {
    if (PyFloat_Check($input)) {
        $1 = (float) PyFloat_AsDouble($input);
        printf("warning, casting float to n = %f\n", $1);
    }
}


%typemap(in) IusTransducerShape {
        if (PyFloat_Check($input)) {
            $1 = (int) PyFloat_AsDouble($input);
            printf("warning, casting float to n = %d\n", $1);
        }
        else {
            $1 = (int) PyInt_AsLong($input);
        }
}

// Handle an input array for transmitApodization
// Handle a double as an array of length 1
%typemap(in) (float *apodization, int numElements) {
    Py_ssize_t i;
    Py_ssize_t length;
    if (PySequence_Check($input)) {
        length = PySequence_Length($input);
    } else if (PyFloat_Check($input)) {
        length = (Py_ssize_t)1;
    } else {
        PyErr_SetString(PyExc_ValueError,"Expected a sequence or a float");
        return NULL;
    }
    float * temp = calloc(length, sizeof(float));
    printf("Got an array of length %d\n", (int)length);
    if( length == (Py_ssize_t)1 ) {
        temp[0] = (float)PyFloat_AsDouble($input);
        printf("Processing length %d\n", (int)length);
    } else {
        printf("Else found for array of length %d\n", (int)length);
        for (i = 0; i < length; i++) {
            PyObject *o = PySequence_GetItem($input,i);
            if (PyNumber_Check(o)) {
                temp[i] = (float)PyFloat_AsDouble(o);
                printf("Element %lld = %f\n",i,temp[i]);
            } else {
                PyErr_SetString(PyExc_ValueError,"Sequence elements must be numbers");
            }
        }
    }
    printf("Additional memory allocated at: %p\n", (void*)temp);
    $1 = temp;
    $2 = (int)length;
}

%typemap(freearg) (float *apodization, int numElements) {
        printf("Additional memory freed from: %p\n", (void*)$1);
        free($1);
}


// IMPORTANT NOTE:
//
//      Keep %include <iusError.h> before %exception
//
// Prevent the error stack from getting cleared by
// the invocation of the iusError routines themselves.
// (i.e. do not wrap exception handling code in
// error module for now).
//
%include <iusError.h>
%exception {
    iusErrorLogClear();
    $action
    if (iusErrorGetCount() > 0) {
        char *err = iusErrorString();
        PyErr_Format(PyExc_Exception,
        "Call %s failed: %s", \
        __func__, err
        );
        SWIG_fail;
    }
}

//%include "numpy.i"
//
//%init %{
//import_array();
//%}
//
//%apply (double* IN_ARRAY1, int DIM1){(double* input, int length)};

//int iusDataFill
//        (
//                iud_t data,
//                double *input,
//                int length
//        );


%include <ius2DNonParametricSource.h>
%include <ius2DParametricSource.h>
%include <ius2DSize.h>
%include <ius2DTransducer.h>
%include <ius2DTransducerPrivate.h>
%include <ius2DTransducerElement.h>
%include <ius2DTransducerElementList.h>
%include <ius3DAngle.h>
%include <ius3DNonParametricSource.h>
%include <ius3DParametricSource.h>
%include <ius3DSize.h>
%include <ius3DTransducer.h>
%include <ius3DTransducerElement.h>
%include <ius3DTransducerElementList.h>
%include <iusBasicFunctions.h>
%include <iusData.h>
%include <iusDataStream.h>
%include <iusDemodulation.h>
%include <iusAcquisition.h>
%include <iusFile.h>
%include <iusFilter.h>
%include <iusFrame.h>
%include <iusFrameList.h>
%include <iusHDF5.h>
%include <iusHistoryNode.h>
%include <iusHistoryNodeList.h>
%include <iusInputFile.h>
%include <iusInputFileStructure.h>
%include <iusIqFile.h>
%include <iusIqFileStructure.h>
%include <iusNonParametricPulse.h>
%include <iusOffset.h>
%include <iusParametricPulse.h>
%include <iusPattern.h>
%include <iusPatternList.h>
%include <iusPatternListDict.h>
%include <iusIqPattern.h>
%include <iusIqPatternList.h>
%include <iusIqPatternListDict.h>
%include <iusPosition.h>
%include <iusPulse.h>
%include <iusPulseDict.h>
%include <iusReceiveChannelMap.h>
%include <iusReceiveChannelMapDict.h>
%include <iusReceiveSettings.h>
%include <iusReceiveSettingsDict.h>
%include <iusSource.h>
%include <iusSourceDict.h>
%include <iusTGC.h>
%include <iusTransducer.h>
%include <iusTransducerElement.h>
%include <iusTransmitApodization.h>
%include <iusTransmitApodizationDict.h>
%include <iusTypes.h>
%include <iusUtil.h>
%include <iusUuid.h>
%include <ius.h>

%include <iusError.h>


// Extend code for given Dict class and contained type
// The EXTEND_DICT_ADT macro assumes, the ADT implemention
// is stored in a separate file
// i.e. iusParameterDictADT.h for ParameterDict data type.
//
%include  extendDict.it
EXTEND_DICT_ADT(ParameterDict, char)
EXTEND_DICT_ADT(DemodulationDict, IusDemodulation)


%include <iusTransducerADT.h>
%include <ius2DTransducerADT.h>
%include <iusPatternListADT.h>
%include <iusHistoryNodeADT.h>
%include <iusAcquisitionADT.h>
%include <dataGenerators.h>

